import { Configuration, OpenAIApi } from 'openai'
import config from 'config'
import { createReadStream } from 'fs'
import axios from 'axios'
import {code} from "telegraf/format";
import {Markup} from "telegraf";
import {message} from "telegraf/filters";

export let UserDialogues = {};
export async function chatGen(ctx, textt) {
    try {
        const userId = ctx.from.id;
        const userMessage = textt;

        const userDialogue = UserDialogues[userId] || [];

        const messages = userDialogue.concat([{role: "user", content: userMessage}]);

        const response = await openaii.createChatCompletion({
            model: 'gpt-3.5-turbo',
            messages: messages,
        });

        const modelReply = response.data.choices[0].message.content;
        ctx.reply(code(modelReply));
        UserDialogues[userId] = messages.concat([{role: 'assistant', content: modelReply}]);
    } catch (e) {
        console.log('Error while gpt chat', e.message)
    }
}

export async function transcription(filepath) {
    try {

        const response = await openaii.createTranscription(
            createReadStream(filepath),
            'whisper-1'
        )
        return response.data.text
    } catch (e) {
        console.log('Error while transcription', e.message)
    }
}

export async function generateIamge(message){
    try {
        const prompt = message
        const configuration = new Configuration({
            apiKey: config.get('OPENAI_KEY')
        });

        const openai = new OpenAIApi(configuration);

        const response = await openai.createImage({
            prompt: prompt,
            n: 4,
            size: "1024x1024",
        });
        return response.data.data;
    }catch (e){
        console.log("error!")
    }
}

export const INITIAL_SESSION = {
    messages: [],
}
export async function initCommand(ctx) {
    await ctx.replyWithPhoto({ source: './src/img/ker.png' });
    await ctx.reply('*–õ—É—á—à–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ —Ç–≤–æ—ë–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ*\n' +
        '\n' +
        '‚Äî –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞–º–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–µ–µ —á–µ–º Google\n' +
        '\n' +
        '‚Äî –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–æ–¥ –∏ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –≤—ã–¥–∞—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç\n' +
        '\n' +
        '‚Äî –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ —Ç–µ—Å—Ç –∏ –±–æ—Ç –≤–∞–º –≤—ã–¥–∞—Å—Ç —Ä–µ—à–µ–Ω–∏–µ –∑–∞ 1 –º–∏–Ω—É—Ç—É\n' +
        '\n' +
        '‚Äî –°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ 4–∫ —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É\n' +
        '\n' +
        '–ò –µ—â—ë —Å–æ—Ç–Ω–∏ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç —Å–ø—Ä–∞–≤–∏—Ç—Å—è –≤—Å–µ–≥–æ –∑–∞ –º–∏–Ω—É—Ç—Éü§ñ')
    const userId = ctx.from.id;
    if(!UserDialogues[userId]){
        UserDialogues[userId] = [];
    }
}

export async function newChatKer(ctx){
    const userId = ctx.from.id;
    UserDialogues[userId] = [];
    await ctx.reply('–ù–∞—á–∏–Ω–∞–ª–æ—Å—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥!')
}

export const configuration = new Configuration({
    apiKey: config.get('OPENAI_KEY')
});

export const openaii = new OpenAIApi(configuration);